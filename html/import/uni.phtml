<?
  include_once ("../../lib/inc.php");

  // initializing

  define ("DATAPATH", INFRADIR. "/data");
  define ("JASAO", DATAPATH. "/db.json");
  $importall = false;

  // reading the original json file

  $json = file_get_contents (JASAO);
  $array = json_decode ($json, true);

  // making works and composers apart

  function work_or_composer ($value)
  {
    if (array_key_exists ("composer_id", $value))
    {
      global $composerarray;
      $composerarray[] = $value;
    }
    else if (array_key_exists ("work_id", $value))
    {
      global $workarray;
      $workarray[$value["work_composer"]][] = $value;
    }
  }

  array_walk ($array, "work_or_composer");

  // inserting composers

  function save_composer ($value)
  {
    global $mysql, $importall, $workarray;

    // only for testing

    $willimport = Array
    (
      "Pérotin",
      "Léonin",
    );

    if (in_array ($value["composer_name"], $willimport) || $importall)
    {
      // inserting

      $insert = Array
      (
        "name" => $value["composer_name"],
        "complete_name" => $value["composer_fullname"],
        "birth" => $value["composer_yearborn"]. "-01-01",
        "death" => ($value["composer_yeardeath"] ? $value["composer_yeardeath"]. "-01-01" : ""),
        "epoch" => $value["composer_period"],
        "country" => $value["composer_country"],
        "uni_id" => $value["composer_id"]
      );

      print_r ($insert);
      mysqlinsert ($mysql, "composer", $insert);
      $cid = mysqli_insert_id ($mysql);

      // looking after composers' works

      array_walk ($workarray[$value["composer_id"]], "save_work", $cid);
    }
  }

  function save_work ($value, $key, $cid)
  {
    global $mysql;

    $insert = Array
    (
      "composer_id" => $cid,
      "title" => $value["work_title"],
      "genre" => $value["work_genre"],
      "uni_id" => $value["work_id"]
    );

    print_r ($insert);
    mysqlinsert ($mysql, "work", $insert);
    $wid = mysqli_insert_id ($mysql);

    if ($wid)
    {
      $file = DATAPATH. "/performancev3/". $value["work_id"]. ".json";

      if (file_exists ($file))
      {
        // getting recordings

        $json = file_get_contents ($file);
        $json = mb_convert_encoding ($json, "iso-8859-1", "UTF-8");

        $recs = save_recordings ($mysql, json_decode ($json, true), array_merge (Array ("id"=>$wid), $insert));

        // now, albums and tracks

        foreach ($recs as $rec)
        {
          $file = DATAPATH. "/album/". $rec["upc"]. ".json";

          if (file_exists ($file))
          {
            $json = file_get_contents ($file);
            $json = mb_convert_encoding ($json, "iso-8859-1", "UTF-8");
            $album = json_decode ($json, true);

            // then, the tracks

            $file = DATAPATH. "/tracks/". $rec["uni_id"]. ".json";

            if (file_exists ($file))
            {
              $json = file_get_contents ($file);
              $json = mb_convert_encoding ($json, "iso-8859-1", "UTF-8");
              $tracks = json_decode ($json, true);

              save_tracks ($mysql, $album, $tracks, Array ("recording_id" => $rec["id"]));
            }
          }
        }
      }
    }
  }

  array_walk ($composerarray, "save_composer");

/* estatisticas

SELECT name, work.id as id, title, count(recording.id) as qtd FROM work, recording, composer where work.id = recording.work_id and composer.id = work.composer_id group by work.id order by qtd desc

SELECT count(distinct work.id) as qtd FROM work, recording where work.id = recording.work_id

select count(distinct recording.id) as qtd from track, recording where recording.id = track.recording_id

Bruckner:
  62 obras, 47 com gravações (75%)
  607 gravações, 135 com faixas (22%)

*/
